// // // 

// // const bcrypt = require("bcrypt");
// // const jwt = require("jsonwebtoken");
// // const User = require("../models/user");

// // exports.register = async (req, res) => {
// //   const { username, password, role } = req.body;

// //   try {
// //     const existingUser = await User.findOne({ where: { username } });
// //     if (existingUser) {
// //       return res.status(400).json({ message: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ —ñ—Å–Ω—É—î" });
// //     }

// //     const hashedPassword = await bcrypt.hash(password, 10);
// //     const newUser = await User.create({
// //       username,
// //       password: hashedPassword,
// //       role: role || "user",
// //     });

// //     const token = jwt.sign(
// //       { id: newUser.id, role: newUser.role },
// //       process.env.JWT_SECRET,
// //       { expiresIn: "1d" }
// //     );

// //     res.status(201).json({ token });

// //   } catch (err) {
// //     console.error("üí• –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:", err);
// //     res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
// //   }
// // };

// // exports.login = async (req, res) => {
// //   const { username, password } = req.body;

// //   try {
// //     const user = await User.findOne({ where: { username } });

// //     if (!user) {
// //       return res.status(401).json({ message: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
// //     }

// //     const isMatch = await bcrypt.compare(password, user.password);
// //     if (!isMatch) {
// //       return res.status(401).json({ message: "–ù–µ–≤—ñ—Ä–Ω–∏–π –ø–∞—Ä–æ–ª—å" });
// //     }

// //     const token = jwt.sign(
// //       { id: user.id, role: user.role },
// //       process.env.JWT_SECRET,
// //       { expiresIn: "1d" }
// //     );

// //     res.json({ token });

// //   } catch (err) {
// //     console.error("üí• –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ª–æ–≥—ñ–Ω—ñ:", err);
// //     res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
// //   }
// // };

// // // –õ–æ–≥—ñ–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
// // exports.login = async (req, res) => {
// //   const { username, password } = req.body;

// //   try {
// //     // –®—É–∫–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –±–∞–∑—ñ –∑–∞ —ñ–º'—è–º
// //     const user = await User.findOne({ where: { username } });

// //     if (!user) {
// //       return res.status(401).json({ message: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
// //     }

// //     // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–∞—Ä–æ–ª—é
// //     const isMatch = await bcrypt.compare(password, user.password);
// //     if (!isMatch) {
// //       return res.status(401).json({ message: "–ù–µ–≤—ñ—Ä–Ω–∏–π –ø–∞—Ä–æ–ª—å" });
// //     }

// //     // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–æ–∫–µ–Ω—É
// //     const token = jwt.sign(
// //       { id: user.id, role: user.role },
// //       process.env.JWT_SECRET,
// //       { expiresIn: "1d" }
// //     );

// //     res.json({ token });

// //   } catch (err) {
// //     console.error("üí• –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ª–æ–≥—ñ–Ω—ñ:", err);
// //     res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
// //   }
// // };


// // controllers/authController.js
// const bcrypt = require("bcrypt");
// const jwt = require("jsonwebtoken");
// const User = require("../models/user");

// exports.register = async (req, res) => {
//   const { username, password, role } = req.body;
//   console.log('–î–∞–Ω—ñ –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:', { username, password, role });

//   try {
//     const existingUser = await User.findOne({ where: { username } });
//     if (existingUser) {
//       return res.status(400).json({ message: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ —ñ—Å–Ω—É—î" });
//     }

//     const hashedPassword = await bcrypt.hash(password, 10);
//     const newUser = await User.create({
//       username,
//       password: hashedPassword,
//       role: role || "user",
//     });

//     const token = jwt.sign(
//       { id: newUser.id, role: newUser.role },
//       process.env.JWT_SECRET,
//       { expiresIn: "1d" }
//     );

//     res.status(201).json({ token });
//   } catch (err) {
//     console.error("üí• –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:", err);
//     res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", error: err });
//   }
// };

// exports.login = async (req, res) => {
//   // –õ–æ–≥—ñ–∫–∞ –¥–ª—è –ª–æ–≥—ñ–Ω—É (—è–∫—â–æ —î)
// };

const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const { User } = require('../models');
const dotenv = require('dotenv');
dotenv.config();

// –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
const register = async (req, res) => {
  try {
    const { username, password } = req.body;

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —ñ—Å–Ω—É—î –≤–∂–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
    const existingUser = await User.findOne({ where: { username } });
    if (existingUser) {
      return res.status(400).json({ message: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ç–∞–∫–∏–º —ñ–º\'—è–º –≤–∂–µ —ñ—Å–Ω—É—î' });
    }

    // –•–µ—à—É–≤–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è
    const hashedPassword = await bcrypt.hash(password, 10);

    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    const newUser = await User.create({
      username,
      password: hashedPassword,
    });

    res.status(201).json({ message: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —Å—Ç–≤–æ—Ä–µ–Ω–∏–π —É—Å–ø—ñ—à–Ω–æ' });
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:', error);
    res.status(500).json({ message: '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞' });
  }
};

// –õ–æ–≥—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
const login = async (req, res) => {
  try {
    const { username, password } = req.body;

    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    const user = await User.findOne({ where: { username } });
    if (!user) {
      return res.status(400).json({ message: '–ù–µ–≤—ñ—Ä–Ω–µ —ñ–º\'—è –∞–±–æ –ø–∞—Ä–æ–ª—å' });
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
    const isPasswordValid = await bcrypt.compare(password, user.password);
    if (!isPasswordValid) {
      return res.status(400).json({ message: '–ù–µ–≤—ñ—Ä–Ω–∏–π —ñ–º\'—è –∞–±–æ –ø–∞—Ä–æ–ª—å' });
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è JWT
    const token = jwt.sign({ userId: user.id }, process.env.JWT_SECRET, { expiresIn: '1h' });

    res.status(200).json({ message: '–õ–æ–≥—ñ–Ω —É—Å–ø—ñ—à–Ω–∏–π', token });
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ª–æ–≥—É–≤–∞–Ω–Ω—ñ:', error);
    res.status(500).json({ message: '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ª–æ–≥—É–≤–∞–Ω–Ω—ñ' });
  }
};

module.exports = {
  register,
  login,
};
